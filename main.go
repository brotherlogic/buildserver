// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/main.html
// templates/version.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\x31\x0a\xc3\x30\x0c\x05\xd0\xbd\xa7\xd0\x09\x22\xb2\x7f\x3c\xe4\x26\x2e\x16\xb5\x40\x75\xc1\x71\x0a\xc5\xf8\xee\x25\x28\x1e\xb2\x7d\xfc\x9f\x25\x21\xb7\xb7\x85\x07\x11\xb2\xc4\x74\x06\x22\x34\x6d\x26\x61\x3b\xd4\xd2\x2e\xf5\x2b\x15\xec\x4f\xa7\xe3\x09\xf1\xfc\xa4\xdf\xf5\x23\xaf\x77\x9e\xd7\xab\x38\xcc\x43\xef\x35\x96\x97\xd0\xb2\x69\x89\x55\x65\x1f\xc3\x81\x69\xe8\x7d\x19\x03\x6c\x3a\xa9\x94\x34\x6b\xf6\x01\xe0\xb9\x0c\xec\x17\xff\x03\x00\x00\xff\xff\x1c\x11\x6c\xc0\xb9\x00\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 185, mode: os.FileMode(436), modTime: time.Unix(1553558633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVersionHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x41\x0a\x02\x31\x0c\x45\xf7\x9e\x22\x27\x30\xcc\x3e\x74\x21\x9e\xc1\x7d\xa5\xc1\x16\x62\x07\xda\x8e\x20\x25\x77\x97\x21\x13\x64\x76\x9f\xd7\xf7\x3f\x0d\xe5\xf1\x96\x70\x01\xa0\xcc\x31\xed\x01\x80\x46\x19\xc2\xe1\xb6\x15\x49\x9d\xdb\x87\x1b\xa1\xa1\xdd\x43\x17\xe9\xb9\xa6\xef\xd1\xc8\xcb\x59\xcf\xcb\xf1\xb0\x89\x85\x39\x5b\xac\x2f\x86\xeb\x83\x5b\x2f\x6b\xed\xaa\x26\x48\x09\x73\x3a\xbd\xc7\xc1\xaa\xf0\x07\xaa\x84\x52\x7c\x82\x6b\xf2\x1a\xda\x30\xa1\x7f\x82\xd0\x2e\xf9\x05\x00\x00\xff\xff\xf2\x6a\xf0\xe3\xd1\x00\x00\x00")

func templatesVersionHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesVersionHtml,
		"templates/version.html",
	)
}

func templatesVersionHtml() (*asset, error) {
	bytes, err := templatesVersionHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/version.html", size: 209, mode: os.FileMode(436), modTime: time.Unix(1553645214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/main.html":    templatesMainHtml,
	"templates/version.html": templatesVersionHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"main.html":    &bintree{templatesMainHtml, map[string]*bintree{}},
		"version.html": &bintree{templatesVersionHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
